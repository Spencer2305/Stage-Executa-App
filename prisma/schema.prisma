generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                   String                  @id @default(cuid())
  name                 String
  slug                 String                  @unique
  accountId            String                  @unique @map("account_id")
  plan                 Plan                    @default(FREE)
  billingEmail         String?                 @map("billing_email")
  s3BucketName         String?                 @map("s3_bucket_name")
  openaiOrgId          String?                 @map("openai_org_id")
  stripeCustomerId     String?                 @unique @map("stripe_customer_id")
  stripeSubscriptionId String?                 @unique @map("stripe_subscription_id")
  stripePriceId        String?
  stripeCurrentPeriodEnd DateTime?
  subscriptionStatus   String?                 @map("subscription_status")
  currentPeriodStart   DateTime?               @map("current_period_start")
  currentPeriodEnd     DateTime?               @map("current_period_end")
  createdAt            DateTime                @default(now()) @map("created_at")
  updatedAt            DateTime                @updatedAt @map("updated_at")
  assistants           Assistant[]
  dropboxConnections   DropboxConnection[]
  slackConnections     SlackConnection[]
  discordConnections   DiscordConnection[]
  fileSessions         FileProcessingSession[]
  knowledgeFiles       KnowledgeFile[]
  users                User[]
  
  // Analytics relations
  conversations        Conversation[]
  dailyAnalytics       DailyAnalytics[]
  popularQueries       PopularQuery[]
  userFeedback         UserFeedback[]

  chatSessions         ChatSession[]
  humanAgents          HumanAgent[]
  handoffRequests      HandoffRequest[]

  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  accountId     String    @map("account_id")
  email         String    @unique
  passwordHash  String    @map("password_hash")
  name          String
  avatar        String?
  bio           String?
  company       String?
  website       String?
  role          UserRole  @default(MEMBER)
  emailVerified Boolean   @default(false) @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  sessions      Session[]
  account       Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)

  humanAgent       HumanAgent?

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  userAgent String?  @map("user_agent")
  ipAddress String?  @map("ip_address")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model FileProcessingSession {
  id             String                      @id @default(cuid())
  accountId      String                      @map("account_id")
  userId         String                      @map("user_id")
  sessionName    String?                     @map("session_name")
  status         FileProcessingSessionStatus @default(PENDING)
  totalFiles     Int                         @default(0) @map("total_files")
  processedFiles Int                         @default(0) @map("processed_files")
  errorFiles     Int                         @default(0) @map("error_files")
  startedAt      DateTime?                   @map("started_at")
  completedAt    DateTime?                   @map("completed_at")
  createdAt      DateTime                    @default(now()) @map("created_at")
  account        Account                     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  files          KnowledgeFile[]

  @@map("file_processing_sessions")
}

model KnowledgeFile {
  id                    String                 @id @default(cuid())
  accountId             String                 @map("account_id")
  processingSessionId   String?                @map("processing_session_id")
  originalName          String                 @map("original_name")
  s3Key                 String                 @map("s3_key")
  s3Bucket              String                 @map("s3_bucket")
  fileType              String                 @map("file_type")
  fileSize              BigInt                 @map("file_size")
  mimeType              String?                @map("mime_type")
  checksum              String?
  status                KnowledgeFileStatus    @default(UPLOADED)
  openaiFileId          String?                @map("openai_file_id")
  vectorStoreId         String?                @map("vector_store_id")
  extractedText         String?                @map("extracted_text")
  textLength            Int?                   @map("text_length")
  pageCount             Int?                   @map("page_count")
  processingStartedAt   DateTime?              @map("processing_started_at")
  processingCompletedAt DateTime?              @map("processing_completed_at")
  processingError       String?                @map("processing_error")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  assistantFiles        AssistantFile[]
  account               Account                @relation(fields: [accountId], references: [id], onDelete: Cascade)
  processingSession     FileProcessingSession? @relation(fields: [processingSessionId], references: [id])

  @@index([accountId, status])
  @@index([s3Key])
  @@index([checksum])
  @@map("knowledge_files")
}

model Assistant {
  id                          String            @id @default(cuid())
  accountId                   String            @map("account_id")
  name                        String
  description                 String?
  instructions                String?
  status                      AssistantStatus   @default(DRAFT)
  openaiAssistantId           String?           @map("openai_assistant_id")
  vectorStoreId               String?           @map("vector_store_id")
  model                       String?           @default("gpt-4-turbo")
  apiKey                      String?           @map("api_key")
  embedUrl                    String?           @map("embed_url")
  isPublic                    Boolean           @default(false) @map("is_public")
  embedBubbleColor            String?           @default("#3B82F6") @map("embed_bubble_color")
  embedButtonShape            String?           @default("rounded") @map("embed_button_shape")
  embedFontStyle              String?           @default("system") @map("embed_font_style")
  embedPosition               String?           @default("bottom-right") @map("embed_position")
  chatBackgroundColor         String?           @default("#FFFFFF") @map("chat_background_color")
  userMessageBubbleColor      String?           @default("#3B82F6") @map("user_message_bubble_color")
  assistantMessageBubbleColor String?           @default("#F3F4F6") @map("assistant_message_bubble_color")
  assistantFontStyle          String?           @default("sans") @map("assistant_font_style")
  messageBubbleRadius         Int?              @default(12) @map("message_bubble_radius")
  showAssistantAvatar         Boolean?          @default(true) @map("show_assistant_avatar")
  assistantAvatarUrl          String?           @map("assistant_avatar_url")
  showChatHeader              Boolean?          @default(true) @map("show_chat_header")
  chatHeaderTitle             String?           @default("AI Assistant") @map("chat_header_title")
  welcomeMessage              String?           @map("welcome_message")
  totalSessions               Int               @default(0) @map("total_sessions")
  totalMessages               Int               @default(0) @map("total_messages")
  createdAt                   DateTime          @default(now()) @map("created_at")
  updatedAt                   DateTime          @updatedAt @map("updated_at")
  lastTrained                 DateTime?         @map("last_trained")
  files                       AssistantFile[]
  slackConnections            SlackConnection[]
  discordConnections          DiscordConnection[]
  account                     Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  // Analytics relations
  conversations               Conversation[]
  dailyAnalytics              DailyAnalytics[]
  popularQueries              PopularQuery[]
  userFeedback                UserFeedback[]
  
  chatSessions                ChatSession[]
  chatMessages                ChatMessage[]
  handoffRequests             HandoffRequest[]

  // New handoff configuration
  handoffEnabled              Boolean           @default(false)
  handoffSettings             Json?             @map("handoff_settings")

  @@index([accountId, status])
  @@map("assistants")
}

model AssistantFile {
  assistantId String        @map("assistant_id")
  fileId      String        @map("file_id")
  addedAt     DateTime      @default(now()) @map("added_at")
  assistant   Assistant     @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  file        KnowledgeFile @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([assistantId, fileId])
  @@map("assistant_files")
}

model DropboxConnection {
  id               String               @id @default(cuid())
  accountId        String               @map("account_id")
  userId           String               @map("user_id")
  accessToken      String               @map("access_token")
  refreshToken     String?              @map("refresh_token")
  expiresAt        DateTime?            @map("expires_at")
  dropboxAccountId String               @map("dropbox_account_id")
  dropboxEmail     String               @map("dropbox_email")
  displayName      String               @map("display_name")
  isActive         Boolean              @default(true) @map("is_active")
  lastSyncAt       DateTime?            @map("last_sync_at")
  createdAt        DateTime             @default(now()) @map("created_at")
  updatedAt        DateTime             @updatedAt @map("updated_at")
  account          Account              @relation(fields: [accountId], references: [id], onDelete: Cascade)
  syncSessions     DropboxSyncSession[]

  @@unique([accountId, dropboxAccountId])
  @@map("dropbox_connections")
}

model DropboxSyncSession {
  id             String                   @id @default(cuid())
  connectionId   String                   @map("connection_id")
  status         DropboxSyncSessionStatus @default(PENDING)
  totalFiles     Int                      @default(0) @map("total_files")
  processedFiles Int                      @default(0) @map("processed_files")
  errorFiles     Int                      @default(0) @map("error_files")
  syncedFiles    Int                      @default(0) @map("synced_files")
  skippedFiles   Int                      @default(0) @map("skipped_files")
  errorMessage   String?                  @map("error_message")
  startedAt      DateTime                 @default(now()) @map("started_at")
  completedAt    DateTime?                @map("completed_at")
  connection     DropboxConnection        @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@map("dropbox_sync_sessions")
}

model SlackConnection {
  id                String    @id @default(cuid())
  accountId         String    @map("account_id")
  assistantId       String    @map("assistant_id")
  teamId            String    @map("team_id")
  teamName          String    @map("team_name")
  teamDomain        String?   @map("team_domain")
  userId            String    @map("user_id")
  userName          String    @map("user_name")
  botToken          String    @map("bot_token")
  botUserId         String    @map("bot_user_id")
  botScopes         String    @map("bot_scopes")
  isActive          Boolean   @default(true) @map("is_active")
  lastMessageAt     DateTime? @map("last_message_at")
  totalMessages     Int       @default(0) @map("total_messages")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  account           Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  assistant         Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  @@unique([teamId, assistantId])
  @@map("slack_connections")
}

model DiscordConnection {
  id                String    @id @default(cuid())
  accountId         String    @map("account_id")
  assistantId       String    @map("assistant_id")
  guildId           String    @map("guild_id")
  guildName         String    @map("guild_name")
  guildIcon         String?   @map("guild_icon")
  botToken          String    @map("bot_token")
  botUserId         String?   @map("bot_user_id")
  permissions       String    @map("permissions")
  isActive          Boolean   @default(true) @map("is_active")
  lastMessageAt     DateTime? @map("last_message_at")
  totalMessages     Int       @default(0) @map("total_messages")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  account           Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  assistant         Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  @@unique([guildId, assistantId])
  @@map("discord_connections")
}

// Analytics Models
model Conversation {
  id            String              @id @default(cuid())
  assistantId   String              @map("assistant_id")
  accountId     String              @map("account_id")
  sessionId     String?             @map("session_id") // External session ID (website, slack thread, etc.)
  platform      ConversationPlatform @default(WEBSITE)
  userIdentifier String?            @map("user_identifier") // IP, user ID, email hash, etc.
  threadId      String?             @map("thread_id") // OpenAI thread ID
  status        ConversationStatus  @default(ACTIVE)
  totalMessages Int                 @default(0) @map("total_messages")
  userMessages  Int                 @default(0) @map("user_messages")
  assistantMessages Int             @default(0) @map("assistant_messages")
  avgResponseTime Float?            @map("avg_response_time") // in seconds
  userSatisfaction Float?           @map("user_satisfaction") // 1-5 rating
  hasErrors     Boolean             @default(false) @map("has_errors")
  startedAt     DateTime            @default(now()) @map("started_at")
  endedAt       DateTime?           @map("ended_at")
  lastMessageAt DateTime            @default(now()) @map("last_message_at")
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  
  // Relations
  assistant     Assistant           @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  account       Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  messages      ConversationMessage[]
  feedback      UserFeedback[]

  @@index([assistantId, createdAt])
  @@index([accountId, createdAt])
  @@index([platform, createdAt])
  @@map("conversations")
}

model ConversationMessage {
  id               String       @id @default(cuid())
  conversationId   String       @map("conversation_id")
  role             MessageRole
  content          String       @db.Text
  tokenCount       Int?         @map("token_count")
  responseTime     Float?       @map("response_time") // in seconds
  openaiMessageId  String?      @map("openai_message_id")
  errorMessage     String?      @map("error_message")
  hasError         Boolean      @default(false) @map("has_error")
  timestamp        DateTime     @default(now())
  createdAt        DateTime     @default(now()) @map("created_at")
  
  // Relations  
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, timestamp])
  @@map("conversation_messages")
}

model DailyAnalytics {
  id                    String   @id @default(cuid())
  accountId             String   @map("account_id")
  assistantId           String?  @map("assistant_id") // null for account-wide analytics
  date                  DateTime @db.Date
  platform              ConversationPlatform?
  
  // Conversation metrics
  totalConversations    Int      @default(0) @map("total_conversations")
  totalMessages         Int      @default(0) @map("total_messages")
  totalUserMessages     Int      @default(0) @map("total_user_messages")
  totalAssistantMessages Int     @default(0) @map("total_assistant_messages")
  uniqueUsers           Int      @default(0) @map("unique_users")
  
  // Performance metrics
  avgResponseTime       Float?   @map("avg_response_time")
  avgConversationLength Float?   @map("avg_conversation_length")
  avgUserSatisfaction   Float?   @map("avg_user_satisfaction")
  
  // Quality metrics
  successfulConversations Int    @default(0) @map("successful_conversations")
  errorConversations      Int    @default(0) @map("error_conversations")
  errorRate               Float? @map("error_rate")
  
  // Usage patterns
  peakHour                Int?   @map("peak_hour") // 0-23
  avgSessionDuration      Float? @map("avg_session_duration") // in minutes
  
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")
  
  // Relations
  account                 Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  assistant               Assistant? @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  @@unique([accountId, assistantId, date, platform])
  @@index([accountId, date])
  @@index([assistantId, date])
  @@map("daily_analytics")
}

model PopularQuery {
  id            String   @id @default(cuid())
  accountId     String   @map("account_id")
  assistantId   String?  @map("assistant_id")
  query         String   @db.Text
  queryHash     String   @map("query_hash") // Hash for efficient querying
  count         Int      @default(1)
  avgResponseTime Float? @map("avg_response_time")
  avgSatisfaction Float? @map("avg_satisfaction")
  lastAsked     DateTime @map("last_asked")
  isAnswered    Boolean  @default(true) @map("is_answered")
  category      String?  // Auto-categorized query type
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  // Relations
  account       Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  assistant     Assistant? @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  @@unique([accountId, assistantId, queryHash])
  @@index([accountId, count])
  @@index([assistantId, count])
  @@map("popular_queries")
}

model UserFeedback {
  id              String     @id @default(cuid())
  conversationId  String     @map("conversation_id")
  messageId       String?    @map("message_id")
  accountId       String     @map("account_id")
  assistantId     String     @map("assistant_id")
  rating          Int        // 1-5 star rating
  feedback        String?    @db.Text
  feedbackType    FeedbackType @default(RATING)
  userIdentifier  String?    @map("user_identifier")
  platform        ConversationPlatform @default(WEBSITE)
  createdAt       DateTime   @default(now()) @map("created_at")
  
  // Relations
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  account         Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  assistant       Assistant    @relation(fields: [assistantId], references: [id], onDelete: Cascade)

  @@index([assistantId, createdAt])
  @@index([accountId, createdAt])
  @@map("user_feedback")
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
}

enum FileProcessingSessionStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
}

enum KnowledgeFileStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  ERROR
  DELETED
}

enum AssistantStatus {
  DRAFT
  TRAINING
  ACTIVE
  ERROR
}

enum DropboxSyncSessionStatus {
  PENDING
  SYNCING
  COMPLETED
  ERROR
}

// Enums for analytics
enum ConversationPlatform {
  WEBSITE
  SLACK
  DISCORD
  API
  WORDPRESS
  MOBILE
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  ABANDONED
  ERROR
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum FeedbackType {
  RATING
  THUMBS_UP
  THUMBS_DOWN
  COMMENT
  BUG_REPORT
  FEATURE_REQUEST
}

// New models for live chat and human handoff
model HumanAgent {
  id          String   @id @default(cuid())
  accountId   String
  userId      String
  name        String
  email       String
  isOnline    Boolean  @default(false)
  isAvailable Boolean  @default(true)
  maxChats    Int      @default(5)
  
  // Agent settings
  autoAssign  Boolean  @default(true)
  departments String[] // ["sales", "support", "billing"]
  skills      String[] // ["technical", "billing", "general"]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastActive  DateTime @default(now())

  account           Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatSessions      ChatSession[]
  handoffRequests   HandoffRequest[]
  agentMessages     ChatMessage[]

  @@unique([accountId, userId])
  @@unique([userId])
  @@map("human_agents")
}

model ChatSession {
  id           String   @id @default(cuid())
  accountId    String
  assistantId  String
  
  // Customer info
  customerName      String?
  customerEmail     String?
  customerPhone     String?
  customerMetadata  Json?   // Additional customer data
  
  // Session status
  status           ChatStatus @default(ACTIVE)
  isHandedOff      Boolean    @default(false)
  humanAgentId     String?
  
  // Session data
  channel          String     @default("web") // web, whatsapp, etc
  sessionStarted   DateTime   @default(now())
  sessionEnded     DateTime?
  totalMessages    Int        @default(0)
  
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  account          Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  assistant        Assistant       @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  humanAgent       HumanAgent?     @relation(fields: [humanAgentId], references: [id])
  messages         ChatMessage[]
  handoffRequest   HandoffRequest?

  @@map("chat_sessions")
}

model ChatMessage {
  id            String   @id @default(cuid())
  sessionId     String
  
  content       String
  messageType   MessageType @default(TEXT)
  sender        MessageSender
  
  // Agent/Assistant info
  humanAgentId  String?
  assistantId   String?
  
  // Message metadata
  isInternal    Boolean  @default(false) // Internal agent notes
  metadata      Json?    // File attachments, etc
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  humanAgent    HumanAgent? @relation(fields: [humanAgentId], references: [id])
  assistant     Assistant?  @relation(fields: [assistantId], references: [id])

  @@map("chat_messages")
}

model HandoffRequest {
  id           String   @id @default(cuid())
  accountId    String
  sessionId    String   @unique
  assistantId  String
  
  // Request details
  reason       HandoffReason
  priority     HandoffPriority @default(NORMAL)
  context      String?         // Why handoff was triggered
  customerQuery String?        // Original customer question
  
  // Assignment
  assignedAgentId String?
  assignedAt      DateTime?
  acceptedAt      DateTime?
  resolvedAt      DateTime?
  
  // Handoff settings used
  handoffSettings Json // Store the settings used for this handoff
  
  status       HandoffStatus @default(PENDING)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  account      Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  session      ChatSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  assistant    Assistant    @relation(fields: [assistantId], references: [id], onDelete: Cascade)
  assignedAgent HumanAgent? @relation(fields: [assignedAgentId], references: [id])

  @@map("handoff_requests")
}

// Enums for the new models
enum ChatStatus {
  ACTIVE
  TRANSFERRED
  RESOLVED
  ABANDONED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  HANDOFF_REQUEST
}

enum MessageSender {
  CUSTOMER
  AI_ASSISTANT
  HUMAN_AGENT
  SYSTEM
}

enum HandoffReason {
  AI_UNABLE_TO_HELP
  CUSTOMER_REQUESTED
  COMPLEX_ISSUE
  ESCALATION_TRIGGERED
  SENTIMENT_NEGATIVE
  TIMEOUT
}

enum HandoffPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum HandoffStatus {
  PENDING
  ASSIGNED
  ACCEPTED
  IN_PROGRESS
  RESOLVED
  EXPIRED
}
